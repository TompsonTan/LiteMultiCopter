//名称解释：
//IMU:惯性测量单元(Inertial measurement unit)
//LPF:低通滤波器(Low Pass Filter)

//陀螺仪参数读取
//在Sensors.ino中通过Gyro_getADC()获取角速度数据
void Gyro_getADC () {
  i2c_getSixRawADC(MPU6050_ADDRESS, 0x43);//获取MPU6050的原始数据
  
  //GYRO_ORIENTATION()函数是用来设置俯仰、滚转、偏航对应传感器哪个坐标轴的，并把rawADC的数据传到gyroData
  GYRO_ORIENTATION( ((rawADC[0]<<8) | rawADC[1])/4 , // rawADC/4得到的范围: +/- 8192; 对应角速度+/- 2000 deg/sec
	            ((rawADC[2]<<8) | rawADC[3])/4 ,
	            ((rawADC[4]<<8) | rawADC[5])/4 );
  GYRO_Common();
}

//根据传感器的地址和寄存器获取原始数据(Raw)，储存在数组rawADC[6]
void i2c_getSixRawADC(uint8_t add, uint8_t reg) {
  i2c_read_reg_to_buf(add, reg, &rawADC, 6);
}

//读取I2C设备的数据到buf中
size_t i2c_read_reg_to_buf(uint8_t add, uint8_t reg, void *buf, size_t size) {
  i2c_rep_start(add<<1); // I2C 写入方向
  i2c_write(reg);        // 选择寄存器
  return i2c_read_to_buf(add, buf, size);
}



//MWC四轴飞控有两种主要模式：
//1.角速度驱动-acro-特技模式
//2.绝对角度驱动-level-水平模式

//静态全局变量
//油门范围是[1000;2000]，而滚转、俯仰和偏航是[-500;+500](对于中立点1500来说)
  static int16_t rcCommand[4];
//角速度变量
  static int16_t gyroData[3] = {0,0,0};
  
  uint8_t axis,i;
  int16_t error,errorAngle;
  int16_t delta,deltaSum;
  int16_t PTerm,ITerm,DTerm;
  
//1.acro mode
//**** 俯仰 & 滚转 & 偏航 PID **** 
//axis的值0、1、2分别表示俯仰、滚转、偏航三个轴
for(axis=0;axis<3;axis++) 
{
	//这里的conf.P8，俯仰、滚转均为40，偏航为85
	//要控制的误差
	if (abs(rcCommand[axis])<350) //rcCommand[axis]*10*8/conf.P8[axis]= -1000~1000 deg/sec果然是特技模式！
		//如果摇杆信号绝对值<350，使用16位整型计算
		error =          rcCommand[axis]*10*8/conf.P8[axis] - gyroData[axis]; ; // 16 bits is needed for calculation: 350*10*8 = 28000      16 bits is ok for result if P8>2 (P>0.2)
	else 
		//否则使用32位整型计算，以满足精度
		error = (int32_t)rcCommand[axis]*10*8/conf.P8[axis] - gyroData[axis];; // 32 bits is needed for calculation: 500*5*10*8 = 200000   16 bits is ok for result if P8>2 (P>0.2)

	
	//P项
	//默认情况dynP8 = conf.P8，可以通过串口来更改
	if (abs(gyroData[axis])<160)
        PTerm = rcCommand[axis] - gyroData[axis]*dynP8[axis]/10/8; // 16 bits is needed for calculation   160*200 = 32000         16 bits is ok for result
    else
        PTerm = rcCommand[axis] - (int32_t)gyroData[axis]*dynP8[axis]/10/8; // 32 bits is needed for calculation
    

		
	//I项
	//陀螺仪积分并限幅在+/-16000
    errorGyroI[axis]  = constrain(errorGyroI[axis]+error,-16000,+16000);          // WindUp   16 bits is ok here
    //如果角速度大于某个值，清空积分值，640/8192*2000 = 156 deg/sec
	if (abs(gyroData[axis])>640) 
		errorGyroI[axis] = 0;
	//这里的conf.I8，俯仰、滚转均为30，偏航为45
	//右移6位，即除以2的6次方
    ITerm = (errorGyroI[axis]/125*conf.I8[axis])>>6;                                   // 16 bits is ok here 16000/125 = 128 ; 128*250 = 32000
    

	//D项
    delta          = gyroData[axis] - lastGyro[axis];                               // 16 bits is ok here, the dif between 2 consecutive gyro reads is limited to 800
    lastGyro[axis] = gyroData[axis];
    deltaSum       = delta1[axis]+delta2[axis]+delta;
    delta2[axis]   = delta1[axis];
    delta1[axis]   = delta;
 
	//对俯仰和滚转，dynD8 = 23，对偏航为0
    if (abs(deltaSum)<640)
        DTerm = (deltaSum*dynD8[axis])>>5;                       // 16 bits is needed for calculation 640*50 = 32000           16 bits is ok for result
    else
        DTerm = ((int32_t)deltaSum*dynD8[axis])>>5;              // 32 bits is needed for calculation
	
	//最终的输出
	axisPID[axis] =  PTerm + ITerm - DTerm;
}